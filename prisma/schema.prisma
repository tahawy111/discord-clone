// // .env
// DATABASE_URL=postgres://jayoj24429%40eazenity.com:bo2KuWDd5TwY@ep-hidden-band-82066406-pooler.us-east-2.aws.neon.tech/discord_clone?pgbouncer=true&connect_timeout=10
// DIRECT_URL=postgres://jayoj24429%40eazenity.com:bo2KuWDd5TwY@ep-hidden-band-82066406.us-east-2.aws.neon.tech/discord_clone?connect_timeout=10
// # SHADOW_DATABASE_URL=...

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique @db.Text
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  servers        Server[]
  members        Member[]
  channels       Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String    @db.Text
  inviteCode String    @db.Text
  userId     String
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  members    Member[]
  channels   Channel[]
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)
  userId    String
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id          String      @id @default(uuid())
  name        String
  channelType ChannelType @default(TEXT)
  userId      String
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId    String
  server      Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
